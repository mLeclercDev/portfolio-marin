// pages/[projectName].js

import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';
import { createClient } from 'contentful';
import gsap from "gsap"
import Head from 'next/head';
import Cursor from '../components/global/Cursor';
import Navbar from '../components/global/Navbar';
import Layer from '../components/global/Layer';
import Brief from '../components/Brief';
import Testimonial from '../components/Testimonial';
import HeroSectionProject from '../components/HeroSectionProject';
import TextSeparator from '../components/TextSeparator';
import Mockups from '../components/Mockups';
import Process from '../components/Process';
import MockupsSecond from '../components/MockupsSecond';
import Footer from '../components/global/Footer';
import '../styles/globals.scss'

function formatToUrl(title) {
  // Convertir en minuscules et remplacer les espaces par des tirets
  let url = title.toLowerCase().replace(/\s+/g, '-');
  // Supprimer les caractères spéciaux
  url = url.replace(/[^\w-]+/g, '');
  return url;
}

export async function getStaticPaths() {
  // Créez une instance du client Contentful
  const client = createClient({
    space: process.env.CONTENTFUL_SPACE_ID,
    accessToken: process.env.CONTENTFUL_ACCESS_TOKEN,
  });

  try {
    // Récupérez tous les projets depuis Contentful
    const projects = await client.getEntries({ content_type: 'project' });

    // Générez les chemins dynamiques pour chaque projet
    const paths = projects.items.map((project) => ({
      params: { projectName: formatToUrl(project.fields.title) }, // Utilisez le titre du projet comme paramètre
    }));

    // Renvoyez les chemins générés
    return { paths, fallback: false }; // Définissez fallback sur false pour générer uniquement les pages existantes
  } catch (error) {
    console.error('Error fetching data from Contentful:', error);
    return { paths: [], fallback: false }; // En cas d'erreur, retournez une liste vide de chemins
  }
}

export async function getStaticProps() {
  // Créer une instance du client Contentful en utilisant les identifiants d'accès
  const client = createClient({
    space: process.env.CONTENTFUL_SPACE_ID,
    accessToken: process.env.CONTENTFUL_ACCESS_TOKEN,
  });

  try {
    // Récupérer les données depuis Contentful en utilisant différentes requêtes
    const projects = await client.getEntries({ content_type: 'project' });
    // Ajoutez d'autres requêtes pour chaque content type nécessaire

    // Renvoyer les données récupérées en tant que props
    return {
      props: {
        projects: projects.items,
        // Ajoutez d'autres propriétés pour chaque type de contenu récupéré
      },
    };
  } catch (error) {
    console.error('Error fetching data from Contentful:', error);
    return {
      props: {
        projects: [],
        // Initialisez d'autres propriétés à un tableau vide en cas d'erreur
      },
    };
  }
}

const ProjectDetailPage = ({projects}) => {
  const [isRendered, setIsRendered] = useState(false);
  const router = useRouter();
  const { projectName } = router.query;
  const [projectData, setProjectData] = useState(null);

  useEffect(() => { 
    const project = projects.find(project => formatToUrl(project.fields.title) === projectName);
    if (project) {
      setProjectData(project);
    }

  }, [projects]);

  if (!projectData) {
    return <div>Loading...</div>; // Afficher un indicateur de chargement tant que les données sont en cours de récupération
  }

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
    {/*   <Navbar /> */}
      <main>
        <HeroSectionProject image={projectData.fields.featured_image.fields.file.url}  title={projectData.fields.titleH1} />
        <TextSeparator content={" Brief client - "} />
        <Brief brief={projectData.fields.brief} />
        <Process process={projectData.fields.process} />
        <MockupsSecond videos={projectData.fields.desktopMockups} />
        <Mockups images={projectData.fields.responsiveMockups} />
        <Testimonial testimonial={projectData.fields.testimonialClient} />
      </main>
      <Footer triggerSelector=".testimonial"  />
      <Layer />
    </>
  );
};

export default ProjectDetailPage;
